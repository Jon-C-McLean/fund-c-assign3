/**
 * @file schema.h
 * @author Jon McLean (13515869)
 */

#ifndef SCHEMA_H_
#define SCHEMA_H_

#include "utils/errors.h"

#define MAX_DB_NAME_SIZE 100U
#define MAX_TABLE_NAME_SIZE 100U
#define MAX_COLUMN_NAME_SIZE 100U

// Schema used to define a user-defined table's structure and metadata

typedef enum {
    INT,
    DECIMAL,
    STRING
} column_type_t;

typedef struct __attribute__((__packed__)) {
    char columnName[MAX_COLUMN_NAME_SIZE];
    column_type_t type;
    int size;
    int isPrimaryKey; /* Key which will be used for searching and indexing */
} table_col_def_t;

typedef struct __attribute__((__packed__)) {
    char tableName[MAX_TABLE_NAME_SIZE];
    int numColumns;
    table_col_def_t *columns;
    int tableId; /* Used to link data to schema, this should be autogenerated */
} table_schema_def_t;

typedef struct __attribute__((__packed__)) {
    int numTables;
    table_schema_def_t *tables;

    char dbName[MAX_DB_NAME_SIZE];
} database_schema_t;

/**
 * @brief Initializes a database schema with the default options
 * 
 * @warning This operation will allocate memory. It must be destroyed 
 * correctly using SCHEMA_DestroyDatabaseSchema
 * 
 * @param schema Reference to the database schema to initialize
 * @return status_t Status of the operation (see errors.h)
 */
status_t SCHEMA_CreateDefaultDatabaseSchema(database_schema_t **schema);
status_t SCHEMA_DestroyDatabaseSchema(database_schema_t *schema);

status_t SCHEMA_GetTableIdForName(database_schema_t *schema, char *name, int *tableId);
status_t SCHEMA_GetTableForId(database_schema_t *schema, int tableId, table_schema_def_t *table);

status_t SCHEMA_DefineTableStructure(database_schema_t *schema, char *name, table_col_def_t *columns, int numColumns);

status_t SCHEMA_GetColumnForName(table_schema_def_t *table, char *name, table_col_def_t *column);
status_t SCHEMA_AddColumn(database_schema_t *schema, int tableId, char *name, column_type_t type, int maxSize, int isPrimaryKey);
status_t SCHEMA_DeleteColumn(database_schema_t *schema, int tableId, char *name);

#endif